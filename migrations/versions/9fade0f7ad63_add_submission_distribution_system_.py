"""Add submission distribution system models

Revision ID: 9fade0f7ad63
Revises: c065212707fe
Create Date: 2025-08-31 01:06:57.844338

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9fade0f7ad63'
down_revision = 'c065212707fe'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('distribution_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('reviewers_per_submission', sa.Integer(), nullable=True),
    sa.Column('distribution_mode', sa.String(length=50), nullable=True),
    sa.Column('blind_type', sa.String(length=20), nullable=True),
    sa.Column('enable_conflict_detection', sa.Boolean(), nullable=True),
    sa.Column('enable_load_balancing', sa.Boolean(), nullable=True),
    sa.Column('enable_affinity_matching', sa.Boolean(), nullable=True),
    sa.Column('max_submissions_per_reviewer', sa.Integer(), nullable=True),
    sa.Column('min_affinity_level', sa.Integer(), nullable=True),
    sa.Column('allow_overload_on_shortage', sa.Boolean(), nullable=True),
    sa.Column('fallback_to_random', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['evento_id'], ['evento.id'], name=op.f('fk_distribution_config_evento_id_evento')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_distribution_config')),
    sa.UniqueConstraint('evento_id', name=op.f('uq_distribution_config_evento_id'))
    )
    op.create_table('distribution_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('total_submissions', sa.Integer(), nullable=False),
    sa.Column('total_assignments', sa.Integer(), nullable=False),
    sa.Column('distribution_seed', sa.String(length=50), nullable=True),
    sa.Column('conflicts_detected', sa.Integer(), nullable=True),
    sa.Column('fallback_assignments', sa.Integer(), nullable=True),
    sa.Column('failed_assignments', sa.Integer(), nullable=True),
    sa.Column('distribution_details', sa.JSON(), nullable=True),
    sa.Column('error_log', sa.JSON(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['evento_id'], ['evento.id'], name=op.f('fk_distribution_log_evento_id_evento')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_distribution_log'))
    )
    op.create_table('submission_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('normalized_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['evento_id'], ['evento.id'], name=op.f('fk_submission_category_evento_id_evento')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_submission_category'))
    )
    op.create_table('reviewer_profile',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('usuario_id', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('max_assignments', sa.Integer(), nullable=True),
    sa.Column('current_load', sa.Integer(), nullable=True),
    sa.Column('available', sa.Boolean(), nullable=True),
    sa.Column('institution', sa.String(length=255), nullable=True),
    sa.Column('expertise_areas', sa.Text(), nullable=True),
    sa.Column('excluded_institutions', sa.JSON(), nullable=True),
    sa.Column('excluded_authors', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['evento_id'], ['evento.id'], name=op.f('fk_reviewer_profile_evento_id_evento')),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuario.id'], name=op.f('fk_reviewer_profile_usuario_id_usuario')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reviewer_profile')),
    sa.UniqueConstraint('usuario_id', name=op.f('uq_reviewer_profile_usuario_id'))
    )
    op.create_table('spreadsheet_mapping',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('column_mappings', sa.JSON(), nullable=False),
    sa.Column('normalization_rules', sa.JSON(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['usuario.id'], name=op.f('fk_spreadsheet_mapping_created_by_usuario')),
    sa.ForeignKeyConstraint(['evento_id'], ['evento.id'], name=op.f('fk_spreadsheet_mapping_evento_id_evento')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_spreadsheet_mapping'))
    )
    op.create_table('imported_submission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('authors', sa.Text(), nullable=True),
    sa.Column('author_email', sa.String(length=255), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('modality', sa.String(length=100), nullable=True),
    sa.Column('submission_type', sa.String(length=100), nullable=True),
    sa.Column('keywords', sa.Text(), nullable=True),
    sa.Column('abstract', sa.Text(), nullable=True),
    sa.Column('import_batch_id', sa.String(length=36), nullable=True),
    sa.Column('original_row_data', sa.JSON(), nullable=True),
    sa.Column('mapping_config', sa.JSON(), nullable=True),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.Column('submission_id', sa.Integer(), nullable=True),
    sa.Column('processing_errors', sa.JSON(), nullable=True),
    sa.Column('imported_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['evento_id'], ['evento.id'], name=op.f('fk_imported_submission_evento_id_evento')),
    sa.ForeignKeyConstraint(['submission_id'], ['submission.id'], name=op.f('fk_imported_submission_submission_id_submission')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_imported_submission'))
    )
    op.create_table('reviewer_preference',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('reviewer_profile_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('affinity_level', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['submission_category.id'], name=op.f('fk_reviewer_preference_category_id_submission_category')),
    sa.ForeignKeyConstraint(['reviewer_profile_id'], ['reviewer_profile.id'], name=op.f('fk_reviewer_preference_reviewer_profile_id_reviewer_profile')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reviewer_preference')),
    sa.UniqueConstraint('reviewer_profile_id', 'category_id', name='unique_reviewer_category_preference')
    )
    with op.batch_alter_table('assignment', schema=None) as batch_op:
        batch_op.drop_index('idx_assignment_reviewer')
        batch_op.drop_constraint('assignment_submission_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_assignment_submission_id_submission'), 'submission', ['submission_id'], ['id'])

    with op.batch_alter_table('review', schema=None) as batch_op:
        batch_op.drop_index('idx_review_submission')
        batch_op.drop_constraint('review_submission_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_review_submission_id_submission'), 'submission', ['submission_id'], ['id'])

    with op.batch_alter_table('submission', schema=None) as batch_op:
        batch_op.alter_column('author_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('evento_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_index('idx_submission_author_evento')
        batch_op.drop_index('idx_submission_status')
        batch_op.drop_constraint('uq_submission_author_evento', type_='unique')

    with op.batch_alter_table('variavel_dinamica', schema=None) as batch_op:
        batch_op.add_column(sa.Column('obrigatoria', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('formato', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('ativa', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('data_atualizacao', sa.DateTime(), nullable=True))
        batch_op.alter_column('nome',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('descricao',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.alter_column('tipo',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
        batch_op.drop_column('ativo')
        batch_op.drop_column('opcoes')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('variavel_dinamica', schema=None) as batch_op:
        batch_op.add_column(sa.Column('opcoes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('ativo', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.alter_column('tipo',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
        batch_op.alter_column('descricao',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=200),
               existing_nullable=True)
        batch_op.alter_column('nome',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('data_atualizacao')
        batch_op.drop_column('ativa')
        batch_op.drop_column('formato')
        batch_op.drop_column('obrigatoria')

    with op.batch_alter_table('submission', schema=None) as batch_op:
        batch_op.create_unique_constraint('uq_submission_author_evento', ['author_id', 'evento_id'])
        batch_op.create_index('idx_submission_status', ['status'], unique=False)
        batch_op.create_index('idx_submission_author_evento', ['author_id', 'evento_id'], unique=False)
        batch_op.alter_column('evento_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('author_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('review', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_review_submission_id_submission'), type_='foreignkey')
        batch_op.create_foreign_key('review_submission_id_fkey', 'submission', ['submission_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index('idx_review_submission', ['submission_id'], unique=False)

    with op.batch_alter_table('assignment', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_assignment_submission_id_submission'), type_='foreignkey')
        batch_op.create_foreign_key('assignment_submission_id_fkey', 'submission', ['submission_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index('idx_assignment_reviewer', ['reviewer_id'], unique=False)

    op.drop_table('reviewer_preference')
    op.drop_table('imported_submission')
    op.drop_table('spreadsheet_mapping')
    op.drop_table('reviewer_profile')
    op.drop_table('submission_category')
    op.drop_table('distribution_log')
    op.drop_table('distribution_config')
    # ### end Alembic commands ###
