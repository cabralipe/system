from app import create_app
from models import Formulario, Evento, Usuario
from extensions import db

app = create_app()

with app.app_context():
    print("=== CORRE√á√ÉO DA ASSOCIA√á√ÉO FORMUL√ÅRIO-EVENTO ===")
    
    # Buscar formul√°rio de trabalhos (ID 9)
    formulario = Formulario.query.get(9)
    if not formulario:
        print("‚ùå Formul√°rio ID 9 n√£o encontrado!")
        exit(1)
    
    # Buscar evento 12
    evento = Evento.query.get(12)
    if not evento:
        print("‚ùå Evento ID 12 n√£o encontrado!")
        exit(1)
    
    print(f"‚úÖ Formul√°rio encontrado: {formulario.nome} (ID: {formulario.id})")
    print(f"‚úÖ Evento encontrado: {evento.nome} (ID: {evento.id})")
    
    # Verificar se j√° est√° associado
    formularios_evento = list(evento.formularios)
    ja_associado = any(f.id == 9 for f in formularios_evento)
    
    if ja_associado:
        print("‚ÑπÔ∏è Formul√°rio j√° est√° associado ao evento.")
    else:
        print("\nüîß Associando formul√°rio ao evento...")
        
        # Associar formul√°rio ao evento
        evento.formularios.append(formulario)
        
        try:
            db.session.commit()
            print("‚úÖ Formul√°rio associado com sucesso!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao associar formul√°rio: {e}")
            exit(1)
    
    print("\n=== VERIFICA√á√ÉO DA ASSOCIA√á√ÉO DO USU√ÅRIO ===")
    
    # Buscar usu√°rio andre
    usuario = Usuario.query.filter_by(email='andre@teste.com').first()
    if not usuario:
        print("‚ùå Usu√°rio andre@teste.com n√£o encontrado!")
        exit(1)
    
    print(f"‚úÖ Usu√°rio encontrado: {usuario.email} (ID: {usuario.id})")
    print(f"   Evento atual: {usuario.evento_id}")
    
    # Verificar se usu√°rio est√° associado ao evento 12
    if usuario.evento_id != 12:
        print("\nüîß Associando usu√°rio ao evento 12...")
        
        usuario.evento_id = 12
        
        try:
            db.session.commit()
            print("‚úÖ Usu√°rio associado ao evento 12 com sucesso!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao associar usu√°rio: {e}")
            exit(1)
    else:
        print("‚ÑπÔ∏è Usu√°rio j√° est√° associado ao evento 12.")
    
    print("\n=== VERIFICA√á√ÉO FINAL ===")
    
    # Recarregar dados
    evento = Evento.query.get(12)
    usuario = Usuario.query.filter_by(email='andre@teste.com').first()
    
    formularios_evento = list(evento.formularios)
    tem_formulario_trabalhos = any(f.id == 9 for f in formularios_evento)
    
    print(f"Evento 12 ({evento.nome}):")
    print(f"  - Formul√°rios associados: {len(formularios_evento)}")
    for form in formularios_evento:
        print(f"    - {form.nome} (ID: {form.id})")
    
    print(f"\nUsu√°rio {usuario.email}:")
    print(f"  - Evento associado: {usuario.evento_id}")
    
    if tem_formulario_trabalhos and usuario.evento_id == 12:
        print("\nüéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("   O usu√°rio agora pode cadastrar trabalhos no evento 12.")
    else:
        print("\n‚ùå Ainda h√° problemas na configura√ß√£o.")
        if not tem_formulario_trabalhos:
            print("   - Formul√°rio de trabalhos n√£o est√° associado ao evento")
        if usuario.evento_id != 12:
            print("   - Usu√°rio n√£o est√° associado ao evento 12")