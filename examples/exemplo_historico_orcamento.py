"""
Exemplo de uso do sistema de hist√≥rico de altera√ß√µes or√ßament√°rias
"""

from datetime import datetime
from models.orcamento import Orcamento, HistoricoOrcamento
from models.user import Usuario
from models.material import Polo
from services.historico_orcamento_service import HistoricoOrcamentoService
from extensions import db

def exemplo_completo():
    """Exemplo completo de uso do sistema de hist√≥rico or√ßament√°rio"""
    
    # Inicializar o servi√ßo
    service = HistoricoOrcamentoService()
    
    print("=== EXEMPLO: Sistema de Hist√≥rico de Altera√ß√µes Or√ßament√°rias ===\n")
    
    # 1. Criar um or√ßamento de exemplo
    print("1. Criando or√ßamento de exemplo...")
    
    # Buscar ou criar um polo
    polo = Polo.query.first()
    if not polo:
        polo = Polo(nome="Polo Exemplo", ativo=True)
        db.session.add(polo)
        db.session.commit()
    
    # Buscar um usu√°rio
    usuario = Usuario.query.first()
    
    # Criar or√ßamento
    orcamento = Orcamento(
        nome="Or√ßamento Exemplo 2024",
        descricao="Or√ßamento para demonstra√ß√£o do sistema de hist√≥rico",
        valor_total=100000.00,
        valor_custeio=60000.00,
        valor_capital=40000.00,
        periodo_inicio=datetime(2024, 1, 1),
        periodo_fim=datetime(2024, 12, 31),
        polo_id=polo.id,
        ativo=True
    )
    
    db.session.add(orcamento)
    db.session.commit()
    
    print(f"   ‚úÖ Or√ßamento criado: ID {orcamento.id}")
    
    # 2. Registrar cria√ß√£o do or√ßamento
    print("\n2. Registrando cria√ß√£o do or√ßamento...")
    
    service.registrar_criacao(
        orcamento=orcamento,
        usuario_id=usuario.id if usuario else None,
        motivo="Cria√ß√£o inicial do or√ßamento para o ano de 2024"
    )
    
    print("   ‚úÖ Hist√≥rico de cria√ß√£o registrado")
    
    # 3. Simular edi√ß√£o do or√ßamento
    print("\n3. Simulando edi√ß√£o do or√ßamento...")
    
    # Valores anteriores
    valores_anteriores = {
        'valor_total': orcamento.valor_total,
        'valor_custeio': orcamento.valor_custeio,
        'valor_capital': orcamento.valor_capital
    }
    
    # Novos valores
    orcamento.valor_total = 120000.00
    orcamento.valor_custeio = 70000.00
    orcamento.valor_capital = 50000.00
    
    db.session.commit()
    
    # Registrar edi√ß√£o
    service.registrar_edicao(
        orcamento=orcamento,
        valores_anteriores=valores_anteriores,
        usuario_id=usuario.id if usuario else None,
        motivo="Aumento do or√ßamento devido a novas demandas",
        observacoes="Aprovado pela coordena√ß√£o em reuni√£o de 15/01/2024"
    )
    
    print("   ‚úÖ Hist√≥rico de edi√ß√£o registrado")
    print(f"   üìä Varia√ß√£o: +R$ {orcamento.valor_total - valores_anteriores['valor_total']:,.2f}")
    
    # 4. Simular desativa√ß√£o e reativa√ß√£o
    print("\n4. Simulando desativa√ß√£o e reativa√ß√£o...")
    
    # Desativar
    service.registrar_desativacao(
        orcamento=orcamento,
        usuario_id=usuario.id if usuario else None,
        motivo="Suspens√£o tempor√°ria para revis√£o"
    )
    
    print("   ‚úÖ Hist√≥rico de desativa√ß√£o registrado")
    
    # Reativar
    service.registrar_ativacao(
        orcamento=orcamento,
        usuario_id=usuario.id if usuario else None,
        motivo="Reativa√ß√£o ap√≥s revis√£o aprovada"
    )
    
    print("   ‚úÖ Hist√≥rico de ativa√ß√£o registrado")
    
    # 5. Obter hist√≥rico completo
    print("\n5. Obtendo hist√≥rico completo...")
    
    historico = service.obter_historico(orcamento_id=orcamento.id)
    
    print(f"   üìã Total de registros: {len(historico)}")
    
    for item in historico:
        print(f"   ‚Ä¢ {item.data_alteracao.strftime('%d/%m/%Y %H:%M')} - "
              f"{item.tipo_alteracao.upper()} - {item.motivo}")
    
    # 6. Obter estat√≠sticas
    print("\n6. Obtendo estat√≠sticas...")
    
    stats = service.obter_estatisticas()
    
    print(f"   üìä Total de altera√ß√µes: {stats['total_alteracoes']}")
    print(f"   üí∞ Varia√ß√£o total positiva: R$ {stats['variacao_total_positiva']:,.2f}")
    print(f"   üí∏ Varia√ß√£o total negativa: R$ {stats['variacao_total_negativa']:,.2f}")
    print(f"   üìà Tipos de altera√ß√£o: {', '.join(stats['tipos_alteracao'])}")
    
    # 7. Demonstrar filtros
    print("\n7. Demonstrando filtros...")
    
    # Filtrar apenas edi√ß√µes
    edicoes = service.obter_historico(
        tipo_alteracao='edicao',
        limite=10
    )
    
    print(f"   ‚úèÔ∏è  Edi√ß√µes encontradas: {len(edicoes)}")
    
    # Filtrar por per√≠odo
    historico_periodo = service.obter_historico(
        data_inicio=datetime(2024, 1, 1),
        data_fim=datetime(2024, 12, 31)
    )
    
    print(f"   üìÖ Registros em 2024: {len(historico_periodo)}")
    
    print("\n=== EXEMPLO CONCLU√çDO ===")
    
    return orcamento

def exemplo_exportacao():
    """Exemplo de exporta√ß√£o de dados"""
    
    print("\n=== EXEMPLO: Exporta√ß√£o de Dados ===\n")
    
    service = HistoricoOrcamentoService()
    
    # Obter dados para exporta√ß√£o
    dados = service.obter_historico_para_exportacao()
    
    print(f"üìä Total de registros para exporta√ß√£o: {len(dados)}")
    
    if dados:
        print("\nüìã Exemplo de registro:")
        primeiro = dados[0]
        print(f"   ID: {primeiro['id']}")
        print(f"   Data: {primeiro['data_alteracao']}")
        print(f"   Tipo: {primeiro['tipo_alteracao']}")
        print(f"   Or√ßamento: {primeiro['orcamento_nome']}")
        print(f"   Usu√°rio: {primeiro['usuario_nome']}")
        print(f"   Valor Total: R$ {primeiro['valor_total_novo']:,.2f}")
    
    print("\n=== EXPORTA√á√ÉO CONCLU√çDA ===")

def exemplo_integracao():
    """Exemplo de integra√ß√£o com outros sistemas"""
    
    print("\n=== EXEMPLO: Integra√ß√£o com Outros Sistemas ===\n")
    
    service = HistoricoOrcamentoService()
    
    # Simular webhook ou notifica√ß√£o
    def callback_alteracao(historico_item):
        print(f"üîî Notifica√ß√£o: {historico_item.tipo_alteracao} no or√ßamento {historico_item.orcamento_id}")
        print(f"   Valor: R$ {historico_item.valor_total_novo:,.2f}")
        print(f"   Varia√ß√£o: R$ {historico_item.variacao_total:,.2f}")
    
    # Buscar or√ßamento existente
    orcamento = Orcamento.query.first()
    
    if orcamento:
        # Registrar altera√ß√£o com callback
        valores_anteriores = {
            'valor_total': orcamento.valor_total,
            'valor_custeio': orcamento.valor_custeio,
            'valor_capital': orcamento.valor_capital
        }
        
        # Simular altera√ß√£o
        orcamento.valor_total += 5000.00
        orcamento.valor_custeio += 3000.00
        orcamento.valor_capital += 2000.00
        
        db.session.commit()
        
        # Registrar com callback
        historico_item = service.registrar_edicao(
            orcamento=orcamento,
            valores_anteriores=valores_anteriores,
            motivo="Ajuste autom√°tico via integra√ß√£o"
        )
        
        # Simular callback
        callback_alteracao(historico_item)
    
    print("\n=== INTEGRA√á√ÉO CONCLU√çDA ===")

if __name__ == "__main__":
    from app import create_app
    
    app = create_app()
    
    with app.app_context():
        try:
            # Executar exemplos
            orcamento = exemplo_completo()
            exemplo_exportacao()
            exemplo_integracao()
            
        except Exception as e:
            print(f"\n‚ùå Erro durante execu√ß√£o: {str(e)}")
            import traceback
            traceback.print_exc()
        
        finally:
            # Limpeza (opcional)
            print("\nüßπ Limpeza conclu√≠da")