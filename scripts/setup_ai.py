#!/usr/bin/env python3
"""
Script de configura√ß√£o da API de IA
Configura automaticamente os servi√ßos de IA dispon√≠veis
"""

import os
import sys
import requests
import json
from pathlib import Path

def check_huggingface_connection(api_key, model_id):
    """Verifica conex√£o com Hugging Face"""
    try:
        url = f"https://api-inference.huggingface.co/models/{model_id}"
        headers = {'Authorization': f'Bearer {api_key}'}
        
        response = requests.post(url, headers=headers, json={
            'inputs': 'test',
            'parameters': {'max_new_tokens': 10}
        }, timeout=10)
        
        return response.status_code == 200
    except:
        return False

def check_tgi_connection(endpoint):
    """Verifica conex√£o com TGI"""
    try:
        url = f"{endpoint}/v1/chat/completions"
        response = requests.post(url, json={
            'model': 'tgi',
            'messages': [{'role': 'user', 'content': 'test'}],
            'max_tokens': 10
        }, timeout=10)
        
        return response.status_code == 200
    except:
        return False

def create_env_file():
    """Cria arquivo .env com configura√ß√µes de IA"""
    env_content = """# Configura√ß√µes de IA - Gerado automaticamente

# Hugging Face
HUGGINGFACE_API_KEY=
HUGGINGFACE_MODEL_ID=microsoft/DialoGPT-medium
HUGGINGFACE_API_URL=https://api-inference.huggingface.co/models

# Text Generation Inference (TGI)
USE_TGI=false
TGI_ENDPOINT=http://localhost:3000

# Configura√ß√µes Avan√ßadas
REQUEST_TIMEOUT=30
MAX_RETRIES=3
ENABLE_FALLBACK=true
"""
    
    env_path = Path('.env')
    if not env_path.exists():
        with open(env_path, 'w') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado com configura√ß√µes padr√£o")
    else:
        print("‚ö†Ô∏è  Arquivo .env j√° existe")

def test_services():
    """Testa todos os servi√ßos configurados"""
    print("\nüîç Testando servi√ßos de IA...")
    
    # Verificar Hugging Face
    hf_key = os.getenv('HUGGINGFACE_API_KEY')
    hf_model = os.getenv('HUGGINGFACE_MODEL_ID', 'microsoft/DialoGPT-medium')
    
    if hf_key:
        print(f"ü§ó Testando Hugging Face com modelo {hf_model}...")
        if check_huggingface_connection(hf_key, hf_model):
            print("‚úÖ Hugging Face: Conectado")
        else:
            print("‚ùå Hugging Face: Falha na conex√£o")
    else:
        print("‚ö†Ô∏è  Hugging Face: API Key n√£o configurada")
    
    # Verificar TGI
    use_tgi = os.getenv('USE_TGI', 'false').lower() == 'true'
    tgi_endpoint = os.getenv('TGI_ENDPOINT', 'http://localhost:3000')
    
    if use_tgi:
        print(f"üöÄ Testando TGI em {tgi_endpoint}...")
        if check_tgi_connection(tgi_endpoint):
            print("‚úÖ TGI: Conectado")
        else:
            print("‚ùå TGI: Falha na conex√£o")
    else:
        print("‚ö†Ô∏è  TGI: Desabilitado")
    
    print("‚úÖ Fallback: Sempre dispon√≠vel")

def install_tgi():
    """Instala e configura TGI"""
    print("\nüöÄ Configurando Text Generation Inference...")
    
    try:
        import subprocess
        
        # Instalar TGI
        print("üì¶ Instalando TGI...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'text-generation-inference'], check=True)
        
        print("‚úÖ TGI instalado com sucesso")
        print("\nüìã Para executar o TGI, use:")
        print(f"text-generation-inference --model-id {os.getenv('HUGGINGFACE_MODEL_ID', 'microsoft/DialoGPT-medium')} --port 3000")
        
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar TGI")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def show_recommendations():
    """Mostra recomenda√ß√µes de configura√ß√£o"""
    print("\nüí° Recomenda√ß√µes:")
    print("1. Para melhor qualidade em portugu√™s, use: neuralmind/bert-base-portuguese-cased")
    print("2. Para desenvolvimento local, configure TGI com USE_TGI=true")
    print("3. Para produ√ß√£o, use Hugging Face com API key v√°lida")
    print("4. Sempre mantenha fallback habilitado para garantir funcionamento")

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ Configurador da API de IA")
    print("=" * 40)
    
    # Carregar vari√°veis de ambiente
    from dotenv import load_dotenv
    load_dotenv()
    
    # Criar arquivo .env se n√£o existir
    create_env_file()
    
    # Testar servi√ßos
    test_services()
    
    # Mostrar op√ß√µes
    print("\nüìã Op√ß√µes dispon√≠veis:")
    print("1. Instalar TGI")
    print("2. Testar servi√ßos novamente")
    print("3. Mostrar recomenda√ß√µes")
    print("4. Sair")
    
    while True:
        try:
            choice = input("\nEscolha uma op√ß√£o (1-4): ").strip()
            
            if choice == '1':
                install_tgi()
            elif choice == '2':
                test_services()
            elif choice == '3':
                show_recommendations()
            elif choice == '4':
                print("üëã At√© logo!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                
        except KeyboardInterrupt:
            print("\nüëã At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

if __name__ == '__main__':
    main()
